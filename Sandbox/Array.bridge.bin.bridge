struct SECURITY_ATTRIBUTES {
    ui32 nLength;
    ui32 lpSecurityDescriptor;
    bool bInheritHandle;
};
function ui32 ThreadDecl(ui32@ arg) {
    return 0;
}
struct OVERLAPPED {
    ui32 Internal;
    ui32 InternalHigh;
    struct DUMMY {
        ui32 Offset;
        ui32 OffsetHigh;
    } DUMMYSTRUCTNAME;
    ui32 hEvent;
};
i32 STD_INPUT_HANDLE = -10;
i32 STD_OUTPUT_HANDLE = -11;
i32 STD_ERROR_HANDLE = -12;
lib("kernel32.dll") {
    ui32 GetLastError();
    ui32 GetCurrentProcess();
    ui32 GetModuleHandleA(array<ui8>@);
    ui32 GetCurrentThreadId();
    ui32 CloseHandle(ui32);
    ui32 CreateThread(SECURITY_ATTRIBUTES@, ui32, function<ThreadDecl>, ui32@, ui32, ui32@);
    ui32 WaitForMultipleObjects(ui32, array<ui32>@, ui32, ui32);
    ui32 AllocConsole();
    ui32 FreeConsole();
    ui32 GetStdHandle(ui32);
    ui32 WriteFile(ui32, array<ui8>@, ui32, ui32@, OVERLAPPED@);
} kernel32;
ui32 g_hConsoleStd;
function bool Console_Init() {
    if(kernel32.AllocConsole()) {
        g_hConsoleStd = kernel32.GetStdHandle(STD_OUTPUT_HANDLE);
        return g_hConsoleStd != -1 && g_hConsoleStd != 0;
    }
    return false;
}
function bool Console_Term() {
    return kernel32.FreeConsole();
}
function ui32 Console_Write(string@ txt) {
    array<ui8> pData @= str2arr(txt);
    ui32 lpNumberOfBytesWritten;
    OVERLAPPED overlapped;
    ui32 res = kernel32.WriteFile(g_hConsoleStd, pData, sizeof(pData), lpNumberOfBytesWritten, overlapped);
    return res;
}
Console_Init();
function bool BooFoo(ui32 arg) {
    Console_Write("BooFoo(" + arg + ")\n");
    if(--arg) {
        return BooFoo(arg);
    }
    return true;
}
function bool _BooFoo(ui32 arg) {
    Console_Write("_BooFoo(" + arg + ")\n");
    return false;
}
struct Test {
    bool b;
    ui64 v64;
    struct A {
        ui64@ v0,v1;
        ui8 v2;
        function<BooFoo> fn;
    } a;
    array<A, 2> arr;
} t;
function bool Foo(array<Test@, 2> arg) {
    Console_Write("** " + arg[0].v64 + " **\n");
    Console_Write("** " + arg[1].v64 + " **\n");
    Console_Write("** " + arg[0].arr[0].v0 + " **\n");
    Console_Write("** " + arg[0].arr[1].v0 + " **\n");
    Console_Write("** " + arg[1].arr[0].v0 + " **\n");
    Console_Write("** " + arg[1].arr[1].v0 + " **\n");
    Console_Write("** " + arg[0].a.v0 + " **\n");
    Console_Write("** " + arg[1].a.v0 + " **\n");
    return false;
}
array<Test@, 2> arr0;
arr0[0].v64 = 100;
arr0[1].v64 = 200;
arr0[0].arr[0].v0 = 1000;
arr0[0].arr[1].v0 = 2000;
arr0[1].arr[0].v0 = 1100;
arr0[1].arr[1].v0 = 2200;
arr0[0].a.v0 = 1999;
arr0[1].a.v0 = 2999;
arr0[1].a.fn(4);
arr0[1].a.fn = _BooFoo;
arr0[1].a.fn(2);
Foo(arr0);
arr0[1].a.v0 = 3999;
error(e) {;
}
Console_Term();