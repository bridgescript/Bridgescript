function ui32 F0_(ui32 a) {
    return a + 1;
}
function ui32 F1_(ui32 a) {
    return a + 2;
}
function function<F0_> F1(ui32 a) {
    if(a == 0) return F0_;
    else return F1_;
}
ui32 v32 = F1(0)(10) + F1(1)(10) + 1000;
array<function<F0_>, 2> arrfn;
arrfn[0] = F0_;
arrfn[1] = F1_;
v32 = arrfn[arrfn[0](0)](10) * arrfn[1](10) + 1000;
array<ui8, 4> arr1dim;
array<ui8, 2, 2> arr2dim;
ui32 i = 0;
for(; i < 4; ) {
    arr1dim[i * i + 1] = i + 10;
    break;
}
array<ui8> _arr @= arr1dim;
arr2dim = arr1dim;
struct Typecasted {
    ui8 v0,v1,v2,v3;
} tc;
tc @= cast<Typecasted>(arr1dim);
function bool F() {
    return true;
}
function ui32 F_0(ui32 arg) {
    return arg + 1;
}
function function<F_0> F_1(ui32 a) {
    return F_0;
}
function function<F_0> _F_1(ui32 a) {
    return F_0;
}
function function<F_1> F_2(bool b, ui64 v) {
    return F_1;
}
ui32 res = F_2(true, 1)(2)(10) + 10;
struct S {
    function<F_2> fn2;
    function<F_1> fn1;
    struct _S {
        ui32 v32;
        function<F_1> fn1;
    } _s;
} _s;
function S@ F_3() {
    S s;
    return s;
}
function function<F_0> F_1_0(ui32 a) {
    return F_0;
}
function function<F_0> F_1_1(ui32 a) {
    return F_0;
}
function array<function<F_1>>@ F_4(ui32 val) {
    array<function<F_1>, 2> arr;
    arr[0] = F_1_0;
    arr[1] = F_1_1;
    return arr;
}
struct _S {
    function<F_3> fn3;
} s1;
s1.fn3 = F_3;
res = s1.fn3().fn1(2)(30);
res = s1.fn3()._s.v32 = 100;
res = s1.fn3()._s.fn1(2)(10);
function array<S>@ F_5(ui32 arg) {
    array<S, arg> arr;
    arr[0].fn1 = _F_1;
    arr[1].fn1 = F_1;
    return arr;
}
res = F_5(2)[0].fn1(1)(2);
res = F_5(2)[1].fn1(2)(3);
res = F_4(1)[0](3)(10);
res = F_4(2)[1](2)(20);
res = F_3().fn1(1)(2);
res = F_3().fn2(false, 2)(1)(3);
res = _s.fn2(true, 2)(3)(4) + 20 * _s.fn1(2)(3);
function bool TRUE() {
    S s;
    return true;
}
function bool FALSE() {
    return false;
}
function array<function<F>>@ F0(ui64 a) {
    return cast<array<function<F>>>(a);
}
array<function<F>@, 2> arfn;
arfn[0] = TRUE;
arfn[1] = FALSE;
function<F> f0 = arfn[0],f1 = arfn[1];
f0();
f1();
struct ST {
    bool b;
    ui32 val32;
    ui64@ val64;
    struct Sub {
        ui32 subval32;
        array<ui8, 4>@ arr;
    };
    Sub sub0;
    Sub@ sub1;
} st;
lib("testdll.dll") {
    ST@ dll_PassST_ext(ST@);
} test;
array<function<F>> aaaa;
ui32 _32 @= cast<ui32>(st);
array<function<F>> fn @= cast<array<function<F>>>(st);
st.b = true;
st.val32 = 0x05;
st.val64 = 0x1000;
st.sub0.subval32 = 10;
st.sub0.arr = str2arr("IN");
st.sub1.subval32 = 30;
st.sub1.arr = str2arr("MB");
ui64 v64 @= cast<ui64>(st);
array<function<F>> ret @= F0(cast<ui64>(st));
array<ui32, 30> arr @= cast<array<ui32, 30>>(st);
ST _st @= cast<ST>(arr);
ST _ret @= test.dll_PassST_ext(st);
test.dll_PassST_ext(st).sub0.subval32 += 10;
bool b = _ret.b;
float d,s = 1.4444 + 4,f = -1.23e+4;
i = 0;
for(d = -.1 - 2; d < -2e-2 && i < 2; ++i) s = f;
function float foo1() {
    float x = 1,y = 2,a = 3,b = 4,c = 5,e = 6,f = 7,g = 8;
    a = b + c * (x / y);
    x = -2.45e-3 * y + (d + f * g) || (s / d + f);
    x = (x * (a + b) + (c) * (c / d));
    c = a + (b + d * d / (s - (e - d)));
    double v0 = 1,v1 = 2,v2 = 3,v3 = 4,v5 = 5,v6 = 6,v7 = 7,v8 = 8,v9 = 9,v11 = 11;
    float res = v0 + v1 - v2 + v3 * v5 + (v6 - v7 * v8 * v9 / v11);
    return res;
}
foo1();