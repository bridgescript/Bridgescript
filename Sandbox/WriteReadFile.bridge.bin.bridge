struct SECURITY_ATTRIBUTES {
    ui32 nLength;
    ui32 lpSecurityDescriptor;
    bool bInheritHandle;
};
function ui32 ThreadDecl(ui32@ arg) {
    return 0;
}
struct OVERLAPPED {
    ui32 Internal;
    ui32 InternalHigh;
    struct DUMMY {
        ui32 Offset;
        ui32 OffsetHigh;
    } DUMMYSTRUCTNAME;
    ui32 hEvent;
};
i32 STD_INPUT_HANDLE = -10,STD_OUTPUT_HANDLE = -11,STD_ERROR_HANDLE = -12;
i32 GENERIC_READ = 0x80000000,GENERIC_WRITE = 0x40000000,CREATE_NEW = 1,OPEN_EXISTING = 3,FILE_ATTRIBUTE_NORMAL = 0x80,INVALID_HANDLE_VALUE = -1,FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100,FORMAT_MESSAGE_FROM_SYSTEM = 0x00001000,FORMAT_MESSAGE_IGNORE_INSERTS = 0x00000200,LANG_NEUTRAL = 0x0c00,SUBLANG_DEFAULT = 0x01;
struct Ptr {
    array<ui8>@ p;
};
lib("kernel32.dll") {
    ui32 FormatMessageA(ui32, ui32@, ui32, ui32, array<ui8>@@, ui32, ui32@);
    ui32 GetLastError();
    ui32 GetCurrentProcess();
    ui32 GetModuleHandleA(array<ui8>@);
    ui32 GetCurrentThreadId();
    ui32 CloseHandle(ui32);
    ui32 CreateThread(SECURITY_ATTRIBUTES@, ui32, function<ThreadDecl>, ui32@, ui32, ui32@);
    ui32 WaitForMultipleObjects(ui32, array<ui32>@, ui32, ui32);
    ui32 AllocConsole();
    ui32 FreeConsole();
    ui32 GetStdHandle(ui32);
    ui32 CreateFileA(array<ui8>@, ui32, ui32, SECURITY_ATTRIBUTES@, ui32, ui32, ui32);
    ui32 WriteFile(ui32, array<ui8>@, ui32, ui32@, OVERLAPPED@);
    ui32 ReadFile(ui32, array<ui8>@, ui32, ui32@, OVERLAPPED@);
    ui32 DeleteFileA(array<ui8>@);
    ui32 LocalFree(array<ui8>@);
} kernel32;
ui32 g_hConsoleStd;
function bool Console_Init() {
    if(kernel32.AllocConsole()) {
        g_hConsoleStd = kernel32.GetStdHandle(STD_OUTPUT_HANDLE);
        return g_hConsoleStd != -1 && g_hConsoleStd != 0;
    }
    return false;
}
function bool Console_Term() {
    return kernel32.FreeConsole();
}
function ui32 Console_Write(string@ txt) {
    array<ui8> pData @= str2arr(txt);
    ui32 lpNumberOfBytesWritten;
    OVERLAPPED overlapped;
    ui32 res = kernel32.WriteFile(g_hConsoleStd, pData, sizeof(pData), lpNumberOfBytesWritten, overlapped);
    return res;
}
function ui32 PrintError(string@ txt) {
    array<ui8> msgBuf;
    ui32 err = kernel32.GetLastError();
    kernel32.FormatMessageA(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS, 0x00000000, err, LANG_NEUTRAL | SUBLANG_DEFAULT * 1024, msgBuf, 0, 0x00000000);
    Console_Write("ERROR: " + txt + " - " + arr2str(cast<array<ui8, 100>>(msgBuf)));
    kernel32.LocalFree(msgBuf);
}
function bool Test_Write(string@ fileName) {
    SECURITY_ATTRIBUTES sa;
    OVERLAPPED ov;
    ui32 hFile = kernel32.CreateFileA(str2arr(fileName), GENERIC_WRITE, 0, sa, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, 0);
    if(hFile != INVALID_HANDLE_VALUE) {
        array<ui8> data @= str2arr("This is some test phrase to write to the file.\n\rNext line.");
        ui32 dwBytesWritten;
        ui32 res = kernel32.WriteFile(hFile, data, sizeof(data), dwBytesWritten, ov);
        if(! res) {
            PrintError("WriteFile()");
            kernel32.CloseHandle(hFile);
        }
        else {
            Console_Write("Written " + dwBytesWritten + " bytes to \"" + fileName + "\" successfully!\n");
            Console_Write(arr2str(data) + "\n");
            kernel32.CloseHandle(hFile);
            return true;
        }
    }
    else {
        PrintError("CretaeFile(CREATE_NEW)");
        kernel32.DeleteFileA(str2arr(fileName));
    }
    return false;
}
function bool Test_Read(string@ fileName) {
    SECURITY_ATTRIBUTES sa;
    OVERLAPPED ov;
    ui32 hFile = kernel32.CreateFileA(str2arr(fileName), GENERIC_READ, 0, sa, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);
    if(hFile != INVALID_HANDLE_VALUE) {
        array<ui8, 100> data;
        ui32 cb;
        if(! kernel32.ReadFile(hFile, data, sizeof(data), cb, ov)) {
            PrintError("ReadFile()");
            kernel32.CloseHandle(hFile);
        }
        else {
            string str = data;
            Console_Write("Read " + cb + " from \"" + fileName + "\" successfully!\n");
            Console_Write(str + "\n");
            kernel32.CloseHandle(hFile);
            return true;
        }
    }
    else {
        PrintError("CretaeFile(OPEN_EXISTING)");
    }
    return false;
}
if(Console_Init()) {
    string fileName = "test.txt";
    if(Test_Write(fileName)) {
        Test_Read(fileName);
    }
    Console_Term();
}