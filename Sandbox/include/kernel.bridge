 
struct SECURITY_ATTRIBUTES {
    ui32   nLength;
    ui32   lpSecurityDescriptor;
    bool   bInheritHandle;
};
 
function ui32 ThreadDecl(ui32@ arg) { return 0; }
 
struct OVERLAPPED {
  /*ULONG_PTR*/ui32 Internal; // this is not real pointer, 
                              // when the request is issued, the system sets this member to STATUS_PENDING 
                              // and status code for the completed request.
  /*ULONG_PTR*/ui32 InternalHigh; // this is not a pointer, 
                                  // the number of bytes transferred for the I/O request, its behavior may change! 
  struct DUMMY{
      /*DWORD*/ui32 Offset;
      /*DWORD*/ui32 OffsetHigh;
  } DUMMYSTRUCTNAME;
  /*HANDLE*/ui32 hEvent;
};

i32 STD_INPUT_HANDLE = -10,
    STD_OUTPUT_HANDLE = -11,
    STD_ERROR_HANDLE = -12;

i32 GENERIC_READ = 0x80000000,
    GENERIC_WRITE = 0x40000000,
    CREATE_NEW = 1,
    OPEN_EXISTING = 3,
    FILE_ATTRIBUTE_NORMAL = 0x80,
    INVALID_HANDLE_VALUE = -1,
    FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100,
    FORMAT_MESSAGE_FROM_SYSTEM = 0x00001000,
    FORMAT_MESSAGE_IGNORE_INSERTS = 0x00000200,
    LANG_NEUTRAL = 0x0c00,
    SUBLANG_DEFAULT = 0x01;

struct Ptr {
    array<ui8> @p;
};

lib("kernel32.dll") {
    ui32 FormatMessageA(ui32,//DWORD   dwFlags,              1
                        ui32@,//LPCVOID lpSource,            2
                        ui32,//DWORD   dwMessageId,          3
                        ui32,//DWORD   dwLanguageId,         4
                        array<ui8>@@,//LPTSTR  lpBuffer,      5
                        ui32,//DWORD   nSize,                6
                        ui32@//va_list *Arguments            7
                       );
  ui32 GetLastError();
  ui32 GetCurrentProcess();
  ui32 GetModuleHandleA(array<ui8>@);//LPCSTR lpModuleName
  ui32 GetCurrentThreadId();
  ui32 CloseHandle(ui32);
  ui32 CreateThread(SECURITY_ATTRIBUTES@,
                    ui32,
                    function<ThreadDecl>,
                    ui32@,
                    ui32,
                    ui32@);
  ui32 WaitForMultipleObjects(ui32 /*nCount*/,
                              array<ui32>@/*lpHandles*/,
                              ui32/*bWaitAll*/,
                              ui32/*dwMilliseconds*/);
  
  ui32 AllocConsole(); // returns BOOL
  ui32 FreeConsole();  // returns BOOL
  ui32 GetStdHandle(ui32/*DWORD nStdHandle*/); // returns HANDLE, 
  /*
    STD_INPUT_HANDLE  (DWORD)-10
    STD_OUTPUT_HANDLE (DWORD)-11
    STD_ERROR_HANDLE  (DWORD)-12
  */
  /*HANDLE*/ui32 CreateFileA(array<ui8>@,//LPCSTR                lpFileName,
                             ui32,//DWORD                 dwDesiredAccess,
                             ui32,//DWORD                 dwShareMode,
                             SECURITY_ATTRIBUTES@,//LPSECURITY_ATTRIBUTES lpSecurityAttributes,
                             ui32,//DWORD                 dwCreationDisposition,
                             ui32,//DWORD                 dwFlagsAndAttributes,
                             ui32//HANDLE                hTemplateFile
                             );
  /*BOOL*/ui32 WriteFile(/*HANDLE hFile*/ui32, 
                         /*LPCVOID lpBuffer*/ array<ui8>@,
                         /*DWORD nNumberOfBytesToWrite*/ ui32,
                         /*LPDWORD lpNumberOfBytesWritten*/ ui32@,
                         /*LPOVERLAPPED lpOverlapped*/OVERLAPPED@);
  /*BOOL*/ ui32 ReadFile(ui32,//HANDLE       hFile,
                         array<ui8>@,//LPVOID       lpBuffer,
                         ui32,//DWORD        nNumberOfBytesToRead,
                         ui32@,//LPDWORD      lpNumberOfBytesRead,
                         OVERLAPPED@//LPOVERLAPPED lpOverlapped
                         );
    /*BOOL*/ ui32 DeleteFileA(array<ui8>@/*LPCSTR lpFileName*/);
    ui32 LocalFree(array<ui8>@);
} kernel32;