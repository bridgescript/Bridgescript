struct SECURITY_ATTRIBUTES {
    ui32 nLength;
    ui32 lpSecurityDescriptor;
    bool bInheritHandle;
};
function ui32 CallbackDecl(array<ui8>@ arg) {
    return 0;
}
struct MyData {
    i32 val1;
    i32 val2;
    function<CallbackDecl> fnCallback;
};
function ui32 ThreadDecl(MyData@ arg) {
    return 0;
}
struct OVERLAPPED {
    ui32 Internal;
    ui32 InternalHigh;
    struct DUMMY {
        ui32 Offset;
        ui32 OffsetHigh;
    } DUMMYSTRUCTNAME;
    ui32 hEvent;
};
ui32 STD_INPUT_HANDLE = -10;
ui32 STD_OUTPUT_HANDLE = -11;
ui32 STD_ERROR_HANDLE = -12;
lib("kernel32.dll") {
    ui32 GetLastError();
    ui32 GetCurrentProcess();
    ui32 GetModuleHandleA(array<ui8>@);
    ui32 GetCurrentThreadId();
    ui32 CloseHandle(ui32);
    ui32 CreateThread(SECURITY_ATTRIBUTES@, ui32, function<ThreadDecl>, MyData@, ui32, ui32@);
    ui32 WaitForMultipleObjects(ui32, array<ui32, 3>@, bool, ui32);
    ui32 AllocConsole();
    ui32 FreeConsole();
    ui32 GetStdHandle(ui32);
    ui32 WriteFile(ui32, array<ui8>@, ui32, ui32@, OVERLAPPED@);
} kernel32;
ui32 g_hConsoleStd;
function bool Console_Init() {
    if(kernel32.AllocConsole()) {
        g_hConsoleStd = kernel32.GetStdHandle(STD_OUTPUT_HANDLE);
        return g_hConsoleStd != -1 && g_hConsoleStd != 0;
    }
    return false;
}
function bool Console_Term() {
    return kernel32.FreeConsole();
}
function ui32 Console_Write(string@ txt) {
    array<ui8> pData @= str2arr(txt);
    ui32 lpNumberOfBytesWritten;
    OVERLAPPED overlapped;
    ui32 res = kernel32.WriteFile(g_hConsoleStd, pData, sizeof(pData), lpNumberOfBytesWritten, overlapped);
    return res;
}
function ui32 MyCallback(array<ui8>@ arg) {
    Console_Write("    MyCallback(" + arr2str(arg) + ")\n");
    return sizeof(arg);
}
function ui32 DivBy0(ui32 arg) {
    ui32 i = 9;
    i = i / arg;
}
function bool Wrapper(ui32 arg) {
    DivBy0(0);
}
function ui32 MyThread0(MyData@ arg) {
    unlock(arg);
    Wrapper(1);
    error(e) {;
        Console_Write("THREAD (" + kernel32.GetCurrentThreadId() + ") - ERROR: " + e.name + "\n");
        Console_Write("---------------------------------------------------------------------------------------\n");
        Console_Write(e.trace + "\n");
        Console_Write("---------------------------------------------------------------------------------------\n");
    }
    Console_Write("THREAD (" + kernel32.GetCurrentThreadId() + "): val1: " + arg.val1 + ", val2: " + arg.val2 + "\n");
    return arg.fnCallback(str2arr("in MyThread0()"));
}
function ui32 MyThread1(MyData@ arg) {
    unlock(arg);
    Console_Write("THREAD (" + kernel32.GetCurrentThreadId() + "): val1: " + arg.val1 + ", val2: " + arg.val2 + "\n");
    return arg.fnCallback(str2arr("in MyThread1()"));
}
function ui32 MyThread2(MyData@ arg) {
    unlock(arg);
    Console_Write("THREAD (" + kernel32.GetCurrentThreadId() + "): val1: " + arg.val1 + ", val2: " + arg.val2 + "\n");
    return arg.fnCallback(str2arr("in MyThread2()"));
}
array<MyData, 3> data;
array<ui32, 3> htreadIds, handles;
array<function<MyThread0>, 3> threadFoo;
Console_Init();
threadFoo[0] = MyThread0;
threadFoo[1] = MyThread1;
threadFoo[2] = MyThread2;
function ui32 CloseHandles(ui32 idx) {
    ui32 i = 0;
    for(; i <= idx; ++i) {
        kernel32.CloseHandle(handles[i]);
    }
    return 0;
}
ui32 i = 0;
for(; i < 3; ++i) {
    SECURITY_ATTRIBUTES sa;
    data[i].val1 = i;
    data[i].val2 = i + 100;
    data[i].fnCallback = MyCallback;
    handles[i] = kernel32.CreateThread(sa, 0, threadFoo[i], lock(data[i]), 0, htreadIds[i]);
    if(handles[i] == 0) {
        CloseHandles(i);
        break;
    }
}
kernel32.WaitForMultipleObjects(3, handles, true, -1);
CloseHandles(2);
error(e) {;
}
Console_Term();